# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import os
import time
from threading import Thread

from PyQt5 import QtCore, QtGui, QtWidgets
import torch
import numpy as np
from models.common import DetectMultiBackend
import torchvision
# from PIL import Image
from utils.augmentations import letterbox
from utils.general import non_max_suppression, scale_coords
from utils.plots import Annotator, colors

import pyrealsense2 as rs
import cv2

classes = ['CA001', 'CA002', 'CA003', 'CA004',
           'CB001', 'CB002', 'CB003', 'CB004',
           'CC001', 'CC002', 'CC003', 'CC004',
           'CD001', 'CD002', 'CD003', 'CD004']

imgsz = (640, 640)  # inference size (height, width)
conf_thres = 0.25  # confidence threshold
iou_thres = 0.45  # NMS IOU threshold
max_det = 1000
agnostic_nms = False
line_thickness = 3

weights = './best.pt'

model = DetectMultiBackend(weights=weights)
stride, names, pt = model.stride, model.names, model.pt
bs = 1
model.warmup(imgsz=(1 if pt else bs, 3, *imgsz))

pipeline = rs.pipeline()
config = rs.config()
config.enable_stream(rs.stream.color, 640, 480, rs.format.bgr8, 30)
prf = pipeline.start(config)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        # self.camera = camera.Camera()

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1600, 1200)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(1140, 40, 400, 600))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.widget = QtWidgets.QWidget(self.gridLayoutWidget)
        self.widget.setObjectName("widget")

        self.outputText = QtWidgets.QTextBrowser(self.widget)
        self.outputText.setGeometry(QtCore.QRect(0, 0, 400, 600))
        self.outputText.setObjectName("outputText")

        self.gridLayout.addWidget(self.widget, 0, 0, 1, 1)
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(60, 40, 1000, 1000))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setHorizontalSpacing(2)
        self.gridLayout_2.setObjectName("gridLayout_2")

        # self.ImageView = QtWidgets.QGraphicsView(self.gridLayoutWidget_2)
        # self.ImageView.setObjectName("ImageView")

        self.ImageLabel = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.ImageLabel.setObjectName("Image")

        self.gridLayout_2.addWidget(self.ImageLabel, 0, 1, 1, 1)
        self.startButton = QtWidgets.QPushButton(self.centralwidget)
        self.startButton.clicked.connect(self.predict)

        self.startButton.setGeometry(QtCore.QRect(1140, 900, 160, 160))
        self.startButton.setObjectName("startButton")

        self.RotationSignalImage = QtWidgets.QGraphicsView(self.centralwidget)
        self.RotationSignalImage.setGeometry(QtCore.QRect(1400, 900, 160, 160))
        self.RotationSignalImage.setObjectName("RotationSignalImage")

        self.progressBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.progressBrowser.setGeometry(QtCore.QRect(1140, 680, 400, 160))
        self.progressBrowser.setObjectName("progressBrowser")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.round = 1

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.startButton.setText(_translate("MainWindow", "START"))

    def predict(self):
        """
        
        """
        self.progressBrowser.clear()
        self.progressBrowser.append('Program Start-> \n')

        self.progressBrowser.append('   Predict Start:\n')

        self.progressBrowser.append('   Capture Image...\n')

        img = self.capture_img()
        print(img.shape)
        img0 = img.copy()
        img = self.imgTransform(img)
        pred = model(img)
        pred = non_max_suppression(pred, conf_thres, iou_thres, None, False, max_det=max_det)
        print(pred)
        # cv2.imshow('img', img0)
        det = pred[0]
        if len(det):
            det[:, :4] = scale_coords(img.shape[2:], det[:, :4], img0.shape).round()
        annotator = Annotator(img0, line_width=line_thickness, example=str(names))

        for *xyxy, conf, cls in reversed(det):
            c = int(cls)  # integer class
            label = f'{names[c]} {conf:.2f}'
            annotator.box_label(xyxy, label, color=colors(c, True))
        self.progressBrowser.append('Predict Done\n')
        img0 = cv2.cvtColor(img0, cv2.COLOR_BGR2RGB)
        QtImg = QtGui.QImage(img0.data,
                             img0.shape[1],
                             img0.shape[0],
                             img0.shape[1] * 3,
                             QtGui.QImage.Format_RGB888)

        QtImg = QtGui.QPixmap(QtImg).scaled(960, 720)
        self.progressBrowser.append('   imshow\n')
        self.ImageLabel.setPixmap(QtImg)
        self.progressBrowser.append('   Saving Results...\n')
        # self.save_result(pred, classes)
        self.progressBrowser.append('   Saved\n')
        self.progressBrowser.append('END')

        # self.require_rotating()
        return pred

    def imgTransform(self, img):
        img = letterbox(img)[0]
        img = img.transpose((2, 0, 1))[::-1]
        img = np.ascontiguousarray(img)
        img = torch.from_numpy(img)
        img = img.half() if model.fp16 else img.float()
        img /= 255
        img = img[None]
        return img

    def save_result(self, pred, classes):
        self.outputText.clear()

        fl = os.listdir('./result_r')
        idx = 1
        while 'SEU-LondoBell-R%d' % idx + '.txt' in fl:
            idx += 1
        f = open('./result_r/' + 'SEU-LondoBell-R%d' % idx + '.txt', 'w')
        f.write('START\n')
        self.outputText.append('START\n')

        clss = pred[0].transpose(0, 1)[-1].detach().numpy()

        print(clss)
        pred_cls_num = np.zeros(len(classes))
        for i in range(len(classes)):
            num = (clss == i).sum(axis=0)
            pred_cls_num[i] = num
            if pred_cls_num[i]:
                f.write('Goal_ID=' + classes[i] + ';' + 'Num=%d' % pred_cls_num[i] + '\n')
                self.outputText.append('Goal_ID=' + classes[i] + ';' + 'Num=%d' % pred_cls_num[i] + '\n')
        f.write('END')
        self.outputText.append('END')
        f.close()
        # print(pred_cls_num)

    def capture_img(self):
        frame = pipeline.wait_for_frames()
        color_rs = frame.get_color_frame()
        img = np.asanyarray(color_rs.get_data())
        return img

    def is_rotating(self, pre_img, cur_img):
        pre = cv2.cvtColor(cv2.GaussianBlur(pre_img, (3, 3), 0), cv2.COLOR_BGR2GRAY)
        cur = cv2.cvtColor(cv2.GaussianBlur(cur_img, (3, 3), 0), cv2.COLOR_BGR2GRAY)
        avg_delta = np.average(cv2.threshold(cur, 63, 255, cv2.THRESH_BINARY)[1] -
                               cv2.threshold(pre, 63, 255, cv2.THRESH_BINARY)[1])
        if avg_delta > 32:
            return 1
        else:
            return 0

    def start(self):
        if self.round == 2:
            self.round2()
            # thr2 = Thread(target=self.round2)
            # thr2.start()
            # thr2.join()
        if self.round == 1:
            self.round1()
            # thr1 = Thread(target=self.round1)
            # thr1.start()
            # thr1.join()

    def round1(self):
        pred = self.predict()
        self.save_result(pred, classes)
        self.round = 2

    def round2(self):
        pred = self.predict()
        for i in range(2):
            self.require_rotating()
            while True:
                pre_img = self.capture_img()
                time.sleep(1)
                cur_img = self.capture_img()
                if self.is_rotating(pre_img, cur_img):
                    continue
                else:
                    break
            pred.extend(self.predict())

        self.save_result(pred, classes)

    def require_rotating(self):
        rot_img = QtGui.QImage('./rot1.jpg')

        pix = QtGui.QPixmap.fromImage(rot_img)
        item = QtWidgets.QGraphicsPixmapItem(pix)
        scene = QtWidgets.QGraphicsScene()
        scene.addItem(item)
        self.RotationSignalImage.setScene(scene)
        time.sleep(5)
        scene.clear()

        # self.RotationSignalImage.close()
        time.sleep(3)


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindows = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindows)
    MainWindows.show()
    sys.exit(app.exec_())
